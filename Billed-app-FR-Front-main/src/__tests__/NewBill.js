/**
 * @jest-environment jsdom
 */

import { screen, fireEvent, createEvent } from "@testing-library/dom";
import { localStorageMock } from "../__mocks__/localStorage.js";
import { ROUTES, ROUTES_PATH } from "../constants/routes";

import NewBillUI from "../views/NewBillUI.js";
import NewBill from "../containers/NewBill.js";
import mockStore from "../__mocks__/store";
//import router from "../app/Router";


describe("Given I am connected as an employee", () => {
  
    describe("When I am on NewBill Page and I select a file with valid extension(jpg, jpeg, png)", () => {
      test("Then the system should continue with processing the file", () => {
        document.body.innerHTML = NewBillUI();
        const fileInput = screen.getByTestId("file");

        // Mock a valid file
        const file = new File(['(content)'], 'test.jpg', { type: 'image/jpeg' });
        Object.defineProperty(fileInput, 'files', {
          value: [file],
        });
        //Path to the eventlistener
        const onNavigate = (pathname) => {
          document.body.innerHTML = ROUTES({ pathname })
      }


        //Mock the localStorage for the file upload
        Object.defineProperty(window, 'localStorage', { value: localStorageMock })
        window.localStorage.setItem('user', JSON.stringify({
          type: 'Employee'
        }))

        //Capture des instances de NewBill pour config callback quand test
        const newBill = new NewBill({
          document, 
          onNavigate, 
          store: mockStore,
          localStorage: window.localStorage
        })
        // Trigger the change event
        fireEvent.change(fileInput)

          // Check if the file input is correctly handled
        expect(fileInput.files).toHaveLength(1);
        expect(fileInput.files[0]).toEqual(file);
      });
    })

   /* describe("When I am on NewBill Page, and i select a file with invalid extension", () => {
      test("Then the system should display an error message", () => {
       
      });
    })
    */


  
  });





/*

describe("Given I am connected as an employee", () => {
  describe("When I am on NewBill Page", () => {
    test("Then mail icon in vertical layout should be active", () => {
      const iconMail = screen.getByTestId('icon-mail')
      
      // expected values
      expect(iconMail.className).toBe('active-icon')
    })

    test("Then there are a form to edit new bill", () => {
      const html = NewBillUI()
      document.body.innerHTML = html
      
      const title = screen.getAllByText("Envoyer une note de frais")
      
      // expected values
      expect(title).toBeTruthy
    })
  })
    
  describe("When I am on NewBill Page and I submit an image in [.jpg.jpeg.png] format", () => {
   // Simulate Ui and data before each test :
      // It sets up a user object in the mocked localstorage.
      // It sets the inner HTML of the document body to the UI generated by NewBillUI().
    beforeEach(() => {
      localStorageMock.setItem(
        "user",
        JSON.stringify({
          type: "Employee",
        })
      );
     
      document.body.innerHTML = NewBillUI();
    })
    
    test("Then it should change input file", () => {
      
        //Set the routePath
        const onNavigate = (pathname) => {
          document.body.innerHTML = ROUTES({ pathname });
          console.log("pathname",pathname);
        };
        
      // mock store from mock/store
      const storeMock = {
        bills: mockStore.bills,
      };
      
      // Capture les instances du constructeur de la class NewBill
      // Configuration des parameÌ€tres de retour.
      const newBill = new NewBill({
        document,
        onNavigate,
        store: storeMock,
        localStorage: localStorageMock,
      });

      // Mock event
      const handleChangeFile = jest.fn((e) => newBill.handleChangeFile(e));
      const inputFile = screen.getByTestId("file");
 
      inputFile.addEventListener("change", handleChangeFile);

      // Mock file
      fireEvent.change(inputFile, {
        target: {
          files: [new File(["picture.png"], "picture.png", { type: "png" })],
        },
      });
      
      // expected values
      expect(handleChangeFile).toHaveBeenCalled();
      expect(inputFile.files[0].name).toBe("picture.png");
    });
    
    // POST
    test("Then it should create a new bill", () => {
      const onNavigate = (pathname) => {
        document.body.innerHTML = ROUTES({ pathname });
      };
      
      const newBill = new NewBill({
        document,
        onNavigate,
        store: null,
        localStorage: localStorageMock,
      });
      
      const handleSubmit = jest.fn(newBill.handleSubmit);
      const submitBtn = screen.getByTestId("form-new-bill");
      submitBtn.addEventListener("submit", handleSubmit);
      
      fireEvent.submit(submitBtn);
      
      // expected values
      expect(handleSubmit).toHaveBeenCalled();
    });
  });
  
  describe("When I fill in the fields in the right format and I click on submit button", () => {
    beforeEach(() => {
      jest.spyOn(console, 'error').mockImplementation(() => {})
      router()
    })

    test("Then I have an error server (500)", async () => {
      const onNavigate = (pathname) => {
        document.body.innerHTML = ROUTES({ pathname });
      };

      mockStore.bills.mockImplementationOnce(() => {
        return {
          update : jest.fn().mockRejectedValueOnce(false)
        }
      })
    
      const newBill = new NewBill({document,  onNavigate, store: mockStore, localStorage: window.localStorage})
      const handleSubmit = jest.fn((e) => newBill.handleSubmit(e))
      
      const form = screen.getByTestId("form-new-bill");
      form.addEventListener("submit", handleSubmit);
      
      try {
        fireEvent.submit(form);
      } catch(err) {
        // expected values
        expect(err).toMatch('error');
      }
    })
  })
  
  describe("When an error occurs on API", () => {
    test("POST New Bill and fails with 404 message error", async () => {
      mockStore.bills.mockImplementationOnce(() => {
        return {
          list : () =>  {
            return Promise.reject(new Error("Erreur 404"))
          }
        }})
        
      window.onNavigate(ROUTES_PATH.Bills)
      
      await new Promise(process.nextTick);
      const message = await screen.getByText(/Erreur 404/)
      
      // expected values
      expect(message).toBeTruthy()
    })

    test("POST New Bill and fails with 500 message error", async () => {
      mockStore.bills.mockImplementationOnce(() => {
        return {
          list : () =>  {
            return Promise.reject(new Error("Erreur 500"))
          }
        }})

      window.onNavigate(ROUTES_PATH.Bills)
      
      await new Promise(process.nextTick);
      const message = await screen.getByText(/Erreur 500/)
      
      // expected values
      expect(message).toBeTruthy()
    })
  })
});

jest.mock("../app/store", () => mockStore);

beforeEach(() => {
  jest.spyOn(mockStore, "bills");
  Object.defineProperty(window, "localStorage", { value: localStorageMock });
  window.localStorage.setItem(
    "user",
    JSON.stringify({
      type: "Employee",
      email: "a@a",
    })
  );
  
  const root = document.createElement("div");
  root.setAttribute("id", "root");
  
  document.body.appendChild(root);
  
  router();
  
  window.onNavigate(ROUTES_PATH.NewBill);
});

*/